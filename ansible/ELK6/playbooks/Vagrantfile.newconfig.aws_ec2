# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
require 'yaml'
default_settings = YAML.load_file 'settings/config.default.yml'
if File.exist?("settings/config.yml")
  user_settings = YAML.load_file 'settings/config.yml'
  settings = default_settings.merge user_settings
else
  settings = default_settings
end
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "dummy"
  config.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder ".", "/vagrant",  type: "rsync" 
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider :aws do |aws, override|
    aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
    aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
    aws.keypair_name = ENV['AWS_KEYPAIR_NAME']
    aws.instance_type = settings['aws_instance_type']
    aws.region = "us-west-2"

    aws.ami = "ami-0a7d051a1c4b54f65"

    #override.ssh.username = "ec2-user"
    override.ssh.username = "ubuntu"
    override.ssh.private_key_path = "~/.ssh/vagrant_key.pem"
    aws.security_groups = [ENV['AWS_SECURITY_GROUPS']]
    aws.tags = {
      'Name' => 'visualize_network_traffic',
      'Description' => 'visualize network traffic by ElasticStack and Grafana'
    }
    aws.elastic_ip = true
    aws.subnet_id = ENV['AWS_SUBNET_ID']
    aws.block_device_mapping = [
      {
        'DeviceName' => "/dev/sda1",
        'VirtualName' => "volume1",
        'Ebs.VolumeSize' => settings['Ebs_VolumeSize'],
        'Ebs.DeleteOnTermination' => true,
        'Ebs.VolumeType' => 'standard',
        #'Ebs.VolumeType' => 'io1',
        #'Ebs.Iops' => 1000
      }
    ]

    #config.ssh.pty=true
    aws.user_data = "sed -i -e 's/^\\(Defaults.*requiretty\\)/#\\1/' /etc/sudoers"

  end   
  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  if Vagrant.has_plugin?("vagrant-proxyconf") && ( ENV['http_proxy'] || ENV['https_proxy'] )
    config.proxy.http     = ENV['http_proxy']
    config.proxy.https    = ENV['https_proxy']
    config.proxy.no_proxy = "localhost,127.0.0.1"
  end
  config.vm.provision "shell", inline: <<-SHELL
    #ifconfig enp0s8 up
    apt-get update
    #apt-get dist-upgrade -y
    apt-get install -y python2.7
  SHELL
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "ELK_newconfig.yml"
    #ansible.verbose = "vvvv"
    ansible.limit = 'all'
    ansible.groups = {
      "ELK" => ["default"]
    }
  end
end
