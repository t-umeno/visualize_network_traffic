# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
require 'yaml'
default_settings = YAML.load_file 'settings/config.default.yml'
if File.exist?("settings/config.yml")
  user_settings = YAML.load_file 'settings/config.yml'
  settings = default_settings.merge user_settings
else
  settings = default_settings
end
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"
  config.disksize.size = '100GB'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  config.vm.define :node01 do | node01 |
    node01.vm.hostname = "node01"
    node01.vm.network "forwarded_port", guest: 5601, host: 5601
    node01.vm.network "forwarded_port", guest: 3000, host: 3000
    node01.vm.network "public_network", auto_config: false
    node01.vm.provider "virtualbox" do |vb01|
      vb01.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
    end
    node01.vm.network :private_network, ip: settings['node01_ip_address']
    node01.vm.provider "virtualbox" do |vb01|
      vb01.memory = "6144"
    end
    if Vagrant.has_plugin?("vagrant-proxyconf") && ( ENV['http_proxy'] || ENV['https_proxy'] )
      node01.proxy.http     = ENV['http_proxy']
      node01.proxy.https    = ENV['https_proxy']
      node01.proxy.no_proxy = "localhost,127.0.0.1"
    end
    node01.vm.provision "shell", inline: <<-SHELL
      ifconfig enp0s8 up
      apt-get update
      apt-get dist-upgrade -y
      apt-get install -y python2.7
    SHELL
    node01.vm.provision "ansible_local" do |ansible|
      #ansible.playbook = "ELK6.yml"
      ansible.playbook = "ELK_newconfig.yml"
      ansible.limit = 'all'
      ansible.groups = {
        "ELK" => ["node01"]
      }
      ansible.extra_vars = {
        node_ip_address: settings['node01_ip_address']
      }
    end
  end

  config.vm.define :node02 do | node02 |
    node02.vm.hostname = "node02"
    node02.vm.network "forwarded_port", guest: 5601, host: 15601
    node02.vm.network "forwarded_port", guest: 3000, host: 13000
    node02.vm.network "public_network", auto_config: false
    node02.vm.provider "virtualbox" do |vb02|
      vb02.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
    end
    node02.vm.network :private_network, ip: settings['node02_ip_address']
    node02.vm.provider "virtualbox" do |vb02|
      vb02.memory = "6144"
    end
    if Vagrant.has_plugin?("vagrant-proxyconf") && ( ENV['http_proxy'] || ENV['https_proxy'] )
      node02.proxy.http     = ENV['http_proxy']
      node02.proxy.https    = ENV['https_proxy']
      node02.proxy.no_proxy = "localhost,127.0.0.1"
    end
    node02.vm.provision "shell", inline: <<-SHELL
      ifconfig enp0s8 up
      apt-get update
      apt-get dist-upgrade -y
      apt-get install -y python2.7
    SHELL
    node02.vm.provision "ansible_local" do |ansible|
      #ansible.playbook = "ELK6.yml"
      ansible.playbook = "ELK_newconfig.yml"
      ansible.limit = 'all'
      ansible.groups = {
        "EK_only" => ["node02"]
      }
      ansible.extra_vars = {
        node_ip_address: settings['node02_ip_address']
      }
    end
  end

  config.vm.define :node03 do | node03 |
    node03.vm.hostname = "node03"
    node03.vm.network "forwarded_port", guest: 5601, host: 25601
    node03.vm.network "forwarded_port", guest: 3000, host: 23000
    node03.vm.network "public_network", auto_config: false
    node03.vm.provider "virtualbox" do |vb03|
      vb03.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
    end
    node03.vm.network :private_network, ip: settings['node03_ip_address']
    node03.vm.provider "virtualbox" do |vb03|
      vb03.memory = "6144"
    end
    if Vagrant.has_plugin?("vagrant-proxyconf") && ( ENV['http_proxy'] || ENV['https_proxy'] )
      node03.proxy.http     = ENV['http_proxy']
      node03.proxy.https    = ENV['https_proxy']
      node03.proxy.no_proxy = "localhost,127.0.0.1"
    end
    node03.vm.provision "shell", inline: <<-SHELL
      ifconfig enp0s8 up
      apt-get update
      apt-get dist-upgrade -y
      apt-get install -y python2.7
    SHELL
    node03.vm.provision "ansible_local" do |ansible|
      #ansible.playbook = "ELK6.yml"
      ansible.playbook = "ELK_newconfig.yml"
      ansible.limit = 'all'
      ansible.groups = {
        "EK_only" => ["node03"]
      }
      ansible.extra_vars = {
        node_ip_address: settings['node03_ip_address']
      }
    end
  end
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #config.vm.network "public_network", auto_config: false
  #  config.vm.provider "virtualbox" do |vb|
  #  vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
  #end

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  #config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #  vb.memory = "4096"
  #end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  #if Vagrant.has_plugin?("vagrant-proxyconf") && ( ENV['http_proxy'] || ENV['https_proxy'] )
  #  config.proxy.http     = ENV['http_proxy']
  #  config.proxy.https    = ENV['https_proxy']
  #  config.proxy.no_proxy = "localhost,127.0.0.1"
  #end
  #config.vm.provision "shell", inline: <<-SHELL
  #  ifconfig enp0s8 up
  #  apt-get update
  #  apt-get dist-upgrade -y
  #  apt-get install -y python2.7
  #SHELL
  #config.vm.provision "ansible_local" do |ansible|
  #  #ansible.playbook = "ELK6.yml"
  #  ansible.playbook = "ELK6_grafana.yml"
  #  ansible.inventory_path = "hosts"
  #  ansible.limit = 'all'
  #end
end
