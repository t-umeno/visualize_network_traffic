input {
    file {
        type => "ipfix"
        path => ["{{ home_dir }}/yaf/json/yaf.*.json" ]
	codec => json
    }
}

filter {
    if ([type] == "ipfix") {
        grok {
            match => ["path", "(?<index>yaf.\d{8,14})\.json$" ]
        }
        date {
            locale => "en"
            match => ["[flows][flowStartMilliseconds]", "yyyy-MM-dd HH:mm:ss.SSS", "ISO8601"]
            target => "@timestamp"
            timezone => "UTC"
        }
        date {
            locale => "en"
            match => ["[flows][flowStartMilliseconds]", "yyyy-MM-dd HH:mm:ss.SSS", "ISO8601"]
            target => "[flows][flowStartMilliseconds]"
            timezone => "UTC"
        }
        date {
            locale => "en"
            match => ["[flows][flowEndMilliseconds]", "yyyy-MM-dd HH:mm:ss.SSS", "ISO8601"]
            target => "[flows][flowEndMilliseconds]"
            timezone => "UTC"
        }

	if ([flows][sourceIPv4Address]) {
            mutate {
	        add_field => { "src_ip_dst_ip" => "%{[flows][sourceIPv4Address]} - %{[flows][destinationIPv4Address]}" }
	        add_field => { "src_ip_proto" => "%{[flows][sourceIPv4Address]} %{[flows][protocolIdentifier]}" }
	        add_field => { "dst_ip_proto" => "%{[flows][destinationIPv4Address]} %{[flows][protocolIdentifier]}" }
	        add_field => { "src_ip_dst_ip_proto" => "%{[flows][sourceIPv4Address]} - %{[flows][destinationIPv4Address]} %{[flows][protocolIdentifier]}" }
	    }
	    if ([flows][sourceIPv4Address]) {
                mutate {
	            add_field => { "src_ip_mac" => "%{[flows][sourceIPv4Address]} %{[flows][sourceMacAddress]}" }
	            add_field => { "dst_ip_mac" => "%{[flows][destinationIPv4Address]} %{[flows][destinationMacAddress]}" }
	        }
	    }
	}
	if ([flows][protocolIdentifier] == 6 or [flows][protocolIdentifier] == 17) {
            mutate {
	        add_field => { "src_ip_port" => "%{[flows][sourceIPv4Address]}:%{[flows][sourceTransportPort]}" }
	        add_field => { "dst_ip_port" => "%{[flows][destinationIPv4Address]}:%{[flows][destinationTransportPort]}" }
	        add_field => { "src_ip_port_proto" => "%{[flows][sourceIPv4Address]}:%{[flows][sourceTransportPort]} %{[flows][protocolIdentifier]}" }
	        add_field => { "dst_ip_port_proto" => "%{[flows][destinationIPv4Address]}:%{[flows][destinationTransportPort]} %{[flows][protocolIdentifier]}" }
	        add_field => { "src_ip_port_dst_ip_port" => "%{[flows][sourceIPv4Address]}:%{[flows][sourceTransportPort]} - %{[flows][destinationIPv4Address]}:%{[flows][destinationTransportPort]}" }
	        add_field => { "src_ip_port_dst_ip_port_proto" => "%{[flows][sourceIPv4Address]}:%{[flows][sourceTransportPort]} - %{[flows][destinationIPv4Address]}:%{[flows][destinationTransportPort]} %{[flows][protocolIdentifier]}" }
            }
	}
	if ([flows][protocolIdentifier] == 6) {
            if ([flows][initialTCPFlags] == "S") {
                mutate {
	            add_field => { "server_ip" => "%{[flows][destinationIPv4Address]}" }
		    add_field => { "server_port" => "%{[flows][destinationTransportPort]}" }
                    add_field => { "server_ip_port" => "%{server_ip}:%{server_port}" }
		    add_field => { "client_ip" => "%{[flows][sourceIPv4Address]}" }
	            add_field => { "client_ip_server_ip" => "%{client_ip} - %{server_ip}" }
	            add_field => { "client_ip_server_ip_port" => "%{client_ip} - %{server_ip}:%{server_port}" }
	        }
            } else if ([flows][reverseInitialTCPFlags] == "S") {
                mutate {
	            add_field => { "server_ip" => "%{[flows][sourceIPv4Address]}" }
	            add_field => { "server_port" => "%{[flows][sourceTransportPort]}" }
	            add_field => { "server_ip_port" => "%{server_ip}:%{server_port}" }
	            add_field => { "client_ip" => "%{[flows][destinationIPv4Address]}" }
	            add_field => { "client_ip_server_ip" => "%{client_ip} - %{server_ip}" }
	            add_field => { "client_ip_server_ip_port" => "%{client_ip} - %{server_ip}:%{server_port}" }
	        }
            }
	}
    }
}

output {
    if ([type] == "ipfix") {
       	influxdb {
            send_as_tags => ["uniq"]
            data_points => {
                "flows_flowStartMilliseconds" => "%{[flows][flowStartMilliseconds]]}"
                "flows_flowEndMilliseconds" => "%{[flows][flowEndMilliseconds]]}"
                "flows_flowDurationMilliseconds" => "%{[flows][flowDurationMilliseconds]]}"
                "flows_reverseFlowDeltaMilliseconds" => "%{[flows][reverseFlowDeltaMilliseconds]]}"
                "flows_protocolIdentifier" => "%{[flows][protocolIdentifier]]}"
                "flows_sourceIPv4Address" => "%{[flows][sourceIPv4Address]]}"
                "flows_sourceTransportPort" => "%{[flows][sourceTransportPort]]}"
                "flows_packetTotalCount" => "%{[flows][packetTotalCount]]}"
                "flows_octetTotalCount" => "%{[flows][octetTotalCount]]}"
                "flows_flowAttributes" => "%{[flows][flowAttributes]}"
                "flows_sourceMacAddress" => "%{[flows][sourceMacAddress]}"
                "flows_destinationIPv4Address" => "%{[flows][destinationIPv4Address]]}"
                "flows_destinationTransportPort" => "%{[flows][destinationTransportPort]]}"
                "flows_reversePacketTotalCount" => "%{[flows][reversePacketTotalCount]]}"
                "flows_reverseOctetTotalCount" => "%{[flows][reverseOctetTotalCount]]}"
                "flows_reverseFlowAttributes" => "%{[flows][reverseFlowAttributes]}"
                "flows_destinationMacAddress" => "%{[flows][destinationMacAddress]}"
                "flows_initialTCPFlags" => "%{[flows][initialTCPFlags]}"
                "flows_unionTCPFlags" => "%{[flows][unionTCPFlags]}"
                "flows_reverseInitialTCPFlags" => "%{[flows][reverseInitialTCPFlags]}"
                "flows_reverseUnionTCPFlags" => "%{[flows][reverseUnionTCPFlags]}"
                "flows_tcpSequenceNumber" => "%{[flows][tcpSequenceNumber]}"
                "flows_reverseTcpSequenceNumber" => "%{[flows][reverseTcpSequenceNumber]}"
                "flows_ingressInterface" => "%{[flows][ingressInterface]}"
                "flows_egressInterface" => "%{[flows][egressInterface]}"
                "flows_vlanId" => "%{[flows][vlanId]}"
                "flows_silkAppLabel" => "%{[flows][silkAppLabel]}"
                "flows_ipClassOfService" => "%{[flows][ipClassOfService]}"
                "flows_flowEndReason" => "%{[flows][flowEndReason]}"
                "flows_collectorName" => "%{[flows][collectorName]}"
                "uniq" => "%{[flows][sourceTransportPort]]}_%{[flows][destinationTransportPort]]}"
            }
            coerce_values => {
                "flows_flowDurationMilliseconds" => "float"
                "flows_reverseFlowDeltaMilliseconds" => "float"
                "flows_protocolIdentifier" => "integer"
                "flows_sourceTransportPort" => "integer"
                "flows_packetTotalCount" => "integer"
                "flows_octetTotalCount" => "integer"
                "flows_destinationTransportPort" => "integer"
                "flows_reversePacketTotalCount" => "integer"
                "flows_reverseOctetTotalCount" => "integer"
                "flows_ingressInterface" => "integer"
                "flows_egressInterface" => "integer"
                "flows_silkAppLabel" => "integer"
            }
            host => ["localhost"]
            db => "traffic1"
            retention_policy => "traffic"
        }
    }
}
